name: CD
on:
  push:
    branches: main

jobs:
  CD:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18.20.4"

      - name: Cache
        id: cache-dependencies
        uses: actions/cache@v3
        with:
          path: |
            service/node_modules
          key: ${{ runner.OS }}-service-${{ hashFiles('service/package-lock.json') }}

      - name: Install dependencies
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        run: cd service && npm install

      - name: Build project
        run: cd service && npm run build

      # 把制品上传到部署机器
      - name: Upload to Deploy Server
        id: upload-to-deploy-server
        uses: easingthemes/ssh-deploy@v2.0.7
        env:
          # SSH_PRIVATE_KEY为准备工作步骤三中生成密钥对里的私钥
          SSH_PRIVATE_KEY: ${{ secrets.DEPLOY_TOKEN }}
          # 指定当前目录中要上传的内容
          SOURCE: "service/dist/"
          # 指定上传到部署机器的哪个目录下
          TARGET: "/jkc/test/CC-AI/service/dist"
          # 上传前指令，此处用于清空TARGET下的文件
          ARGS: "-avzr --delete"
          # REMOTE_HOST为机器的公网IP
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          # REMOTE_USER为登录机器时用到账号名
          REMOTE_USER: ${{secrets.REMOTE_USER}}
      # 把package.json, package-lock.json, pm2.conf.json 上传到目标目录    
      - name: Upload config to Deploy Server
        id: upload-config-to-deploy-server
        run: |
          eval $(ssh-agent -s)
          ssh-add <(echo "${{ secrets.DEPLOY_TOKEN }}")
          rsync -avz --delete -e "ssh -o StrictHostKeyChecking=no" ./service/package.json ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:/jkc/test/CC-AI/service/
          rsync -avz --delete -e "ssh -o StrictHostKeyChecking=no" ./service/package-lock.json ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:/jkc/test/CC-AI/service/
          rsync -avz --delete -e "ssh -o StrictHostKeyChecking=no" ./service/pm2.conf.json ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:/jkc/test/CC-AI/service/
          ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} << 'EOF'
          cd /jkc/test/CC-AI/service
          nvm use 18
          npm install
          npm run restart
          EOF
        env:
          SSH_PRIVATE_KEY: ${{ secrets.DEPLOY_TOKEN }}
